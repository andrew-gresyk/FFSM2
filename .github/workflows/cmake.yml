name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.PLATFORM.OS }}

    env:
      CC: ${{ matrix.PLATFORM.CC }}
      CXX: ${{ matrix.PLATFORM.CXX }}

    strategy:
      matrix:
        PLATFORM:
          - {
              OS: ubuntu-18.04,
              CC: gcc-5,
              CXX: g++-5
            }
          - {
              OS: ubuntu-18.04,
              CC: gcc-6,
              CXX: g++-6
            }
          - {
              OS: ubuntu-20.04,
              CC: gcc-7,
              CXX: g++-7
            }
          - {
              OS: ubuntu-20.04,
              CC: gcc-8,
              CXX: g++-8
            }
          - {
              OS: ubuntu-20.04,
              CC: gcc-9,
              CXX: g++-9
            }
          - {
              OS: ubuntu-20.04,
              CC: gcc-10,
              CXX: g++-10
            }
          - {
              OS: ubuntu-20.04,
              CC: gcc-11,
              CXX: g++-11
            }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-4.0,
          #     CXX: clang++-4.0
          #   }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-5.0,
          #     CXX: clang++-5.0
          #   }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-6.0,
          #     CXX: clang++-6.0
          #   }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-7,
          #     CXX: clang++-7
          #   }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-8,
          #     CXX: clang++-8
          #   }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-9,
          #     CXX: clang++-9
          #   }
          # - {
          #     OS: ubuntu-20.04,
          #     CC: clang-10,
          #     CXX: clang++-10
          #   }
          - {
              OS: ubuntu-20.04,
              CC: clang-11,
              CXX: clang++-11
            }
          - {
              OS: macos-latest,
              CC: clang,
              CXX: clang++
            }

        BUILD_CONFIG: [ Release, Debug ]

    steps:
    - uses: actions/checkout@v2

    # install dependencies
    - name: Install GCC on ubuntu
      if: |
        startsWith(matrix.PLATFORM.OS, 'ubuntu') &&
        startsWith(matrix.PLATFORM.CC, 'gcc-')
      run: |
        echo "deb http://dk.archive.ubuntu.com/ubuntu/ bionic main universe" | sudo tee /etc/apt/sources.list
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install ${{ matrix.PLATFORM.CC }} ${{ matrix.PLATFORM.CXX }}

    - name: Install Clang on ubuntu-18.04
      if: |
        matrix.PLATFORM.OS == 'ubuntu-18.04' &&
        startsWith(matrix.PLATFORM.CC, 'clang-')
      run: |
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main" | sudo tee /etc/apt/sources.list
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install ${{ matrix.PLATFORM.CC }} ${{ matrix.PLATFORM.CXX }}

    - name: Install Clang on ubuntu-20.04
      if: |
        matrix.PLATFORM.OS == 'ubuntu-20.04' &&
        startsWith(matrix.PLATFORM.CC, 'clang-')
      run: |
        echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main" | sudo tee /etc/apt/sources.list
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install ${{ matrix.PLATFORM.CC }} ${{ matrix.PLATFORM.CXX }}

    # main test
    - name: Configure Test
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}

    - name: Build Text
      run: cmake --build ./build --config ${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}

    # examples/basic_audio_player
    - name: Configure 'examples/basic_audio_player'
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/basic_audio_player

    - name: Build 'examples/basic_audio_player'
      run: cmake --build ./build --config ${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/basic_audio_player

    # examples/basic_traffic_light
    - name: Configure 'examples/basic_traffic_light'
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/basic_traffic_light

    - name: Build 'examples/basic_traffic_light'
      run: cmake --build ./build --config ${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/basic_traffic_light

    # examples/debug_logger_interface
    - name: Configure 'examples/debug_logger_interface'
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/debug_logger_interface

    - name: Build 'examples/debug_logger_interface'
      run: cmake --build ./build --config ${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/debug_logger_interface

    # examples/snippets
    - name: Configure 'examples/snippets'
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/snippets

    - name: Build 'examples/snippets'
      run: cmake --build ./build --config ${{ matrix.BUILD_CONFIG }}
      working-directory: ${{ github.workspace }}/examples/snippets
